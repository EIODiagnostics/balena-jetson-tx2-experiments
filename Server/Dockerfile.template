# https://github.com/eiodiagnostics/balena-jetson-tx2-experiments
FROM resin/jetson-tx2-debian:stretch-build
LABEL Description="This image is used create a privileged container for Nvidia Jetson TX2 using BalenaOS" 
LABEL Vendor="EIO Diagnostics" 
LABEL Version="1.0"

LABEL Author="jason@eiodiagnostics.com"

####################################################################
# START SNIPPET FROM: https://github.com/open-horizon/cogwerx-jetson-tx2/Dockerfile.cudabase
# MODIFICATIONS: 
# - commented out MAINTAINER nuculur@gmail.com
# - removed 
#   ## Clean up (don't remove cuda libs... used by child containers)
#   RUN apt-get -y autoremove && apt-get -y autoclean
#   RUN rm -rf /var/cache/apt
####################################################################
# see also https://docs.nvidia.com/cuda/cuda-installation-guide-linux/index.html
# FROM aarch64/ubuntu
# FROM arm64v8/ubuntu:xenial-20180123
# fails to run systemd:
# FROM balenalib/jetson-tx2-debian-openjdk:8-jdk-stretch-build-20181207
# FROM balenalib/jetson-tx2-debian-openjdk:8-jre-stretch-run-20181207
# fails to run systemd:
# FROM balenalib/jetson-tx2-ubuntu-openjdk:8-jdk-xenial-build-20181207
# FROM balenalib/jetson-tx2-ubuntu-openjdk:8-jre-xenial-run-20181207

# https://github.com/open-horizon/cogwerx-jetson-tx2
# AUTHOR bmwshop@gmail.com
# MAINTAINER nuculur@gmail.com

# This is the base container for the Jetson TX2 board with drivers (with cuda)
# base URL for NVIDIA libs
ARG URL=https://developer.download.nvidia.com/devzone/devcenter/mobile/jetpack_l4t/3.2.1/m8u2ki/JetPackL4T_321_b23

# Update packages, install some useful packages
ARG DEBIAN_FRONTEND=noninteractive

# TODO: pciutils may be unnecessary once everything is working
# ca-certificates ensures that we can download from the nvidia site
# systemd is used to start the service nvidia-persistenced
RUN apt-get update && apt-get install -y --no-install-recommends \
    apt-utils \
    bzip2 \
    ca-certificates \
    curl \
    pciutils \ 
    systemd \
    sudo \
    unp 

# libssl and openssl come along for the ride
RUN apt-get install -y --reinstall --no-install-recommends \
  ca-certificates 
  
WORKDIR /tmp

# Install drivers first
RUN curl --silent --verbose --location http://developer.nvidia.com/embedded/dlc/l4t-jetson-tx2-driver-package-28-2 | tar xvfj -
RUN chown root /etc/passwd /etc/sudoers /usr/lib/sudo/sudoers.so /etc/sudoers.d/README
RUN /tmp/Linux_for_Tegra/apply_binaries.sh -r / && rm -fr /tmp/*

# Pull the rest of the jetpack libs for cuda/cudnn and install
RUN curl $URL/cuda-repo-l4t-9-0-local_9.0.252-1_arm64.deb -so cuda-repo-l4t_arm64.deb
RUN curl $URL/libcudnn7_7.0.5.15-1+cuda9.0_arm64.deb -so /tmp/libcudnn_arm64.deb
RUN curl $URL/libcudnn7-dev_7.0.5.15-1+cuda9.0_arm64.deb -so /tmp/libcudnn-dev_arm64.deb

# Install libs: L4T, CUDA, cuDNN
RUN dpkg -i /tmp/cuda-repo-l4t_arm64.deb
RUN apt-key add /var/cuda-repo-9-0-local/7fa2af80.pub
RUN apt-get update && apt-get install -y cuda-toolkit-9.0
RUN dpkg -i /tmp/libcudnn_arm64.deb
RUN dpkg -i /tmp/libcudnn-dev_arm64.deb
ENV LD_LIBRARY_PATH="/usr/lib/aarch64-linux-gnu/tegra{LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}"

# Re-link libs in /usr/lib/tegra
RUN ln -s /usr/lib/aarch64-linux-gnu/tegra/libnvidia-ptxjitcompiler.so.28.2.0 /usr/lib/aarch64-linux-gnu/tegra/libnvidia-ptxjitcompiler.so
RUN ln -s /usr/lib/aarch64-linux-gnu/tegra/libnvidia-ptxjitcompiler.so.28.2.0 /usr/lib/aarch64-linux-gnu/tegra/libnvidia-ptxjitcompiler.so.1
RUN ln -sf /usr/lib/aarch64-linux-gnu/tegra/libGL.so /usr/lib/aarch64-linux-gnu/libGL.so

# D.R. â€“ need to do this for some strange reason (for jetson tx2)
RUN ln -s /usr/lib/aarch64-linux-gnu/libcuda.so /usr/lib/aarch64-linux-gnu/libcuda.so.1
####################################################################
# END SNIPPET FROM: https://github.com/open-horizon/cogwerx-jetson-tx2
####################################################################

ENV PATH="${PATH}:/usr/local/cuda/bin"


####################################################################
# START SNIPPET FROM; https://github.com/balena-io-library/base-images/blob/master/balena-base-images/openjdk/jetson-tx2/debian/stretch/8-jdk/build/Dockerfile
# MODIFICATIONS: removed "rm -rf /var/lib/apt/lists/*
# A few reasons for installing distribution-provided OpenJDK:
#
#  1. Oracle.  Licensing prevents us from redistributing the official JDK.
#
#  2. Compiling OpenJDK also requires the JDK to be installed, and it gets
#     really hairy.
#
#     For some sample build times, see Debian's buildd logs:
#       https://buildd.debian.org/status/logs.php?pkg=openjdk-8

RUN apt-get update && apt-get install -y --no-install-recommends \
        bzip2 \
        unzip \
        xz-utils 

# Default to UTF-8 file.encoding
ENV LANG C.UTF-8

# add a simple script that can auto-detect the appropriate JAVA_HOME value
# based on whether the JDK or only the JRE is installed
RUN { \
        echo '#!/bin/sh'; \
        echo 'set -e'; \
        echo; \
        echo 'dirname "$(dirname "$(readlink -f "$(which javac || which java)")")"'; \
    } > /usr/local/bin/docker-java-home \
    && chmod +x /usr/local/bin/docker-java-home

# do some fancy footwork to create a JAVA_HOME that's cross-architecture-safe
RUN ln -svT "/usr/lib/jvm/java-8-openjdk-$(dpkg --print-architecture)" /docker-java-home
ENV JAVA_HOME /docker-java-home

# see https://bugs.debian.org/775775
# and https://github.com/docker-library/java/issues/19#issuecomment-70546872
ENV CA_CERTIFICATES_JAVA_VERSION 20170531+nmu1

RUN set -ex; \
    \
# deal with slim variants not having man page directories (which causes "update-alternatives" to fail)
    if [ ! -d /usr/share/man/man1 ]; then \
        mkdir -p /usr/share/man/man1; \
    fi; \
    \
    apt-get update; \
    apt-get install -y --no-install-recommends \
        openjdk-8-jdk \
        ca-certificates-java="$CA_CERTIFICATES_JAVA_VERSION" \
    
# verify that "docker-java-home" returns what we expect
    [ "$(readlink -f "$JAVA_HOME")" = "$(docker-java-home)" ]; \
    \
# update-alternatives so that future installs of other OpenJDK versions don't change /usr/bin/java
    update-alternatives --get-selections | awk -v home="$(readlink -f "$JAVA_HOME")" 'index($3, home) == 1 { $2 = "manual"; print | "update-alternatives --set-selections" }'; \
# ... and verify that it actually worked for one of the alternatives we care about
    update-alternatives --query java | grep -q 'Status: manual'

# see CA_CERTIFICATES_JAVA_VERSION notes above
RUN /var/lib/dpkg/info/ca-certificates-java.postinst configure

####################################################################
# END SNIPPET FROM: https://github.com/balena-io-library/base-images/blob/master/balena-base-images/openjdk/jetson-tx2/debian/stretch/8-jdk/build/Dockerfile
####################################################################

# switch on systemd init system in container -- requires "privileged: true" in docker-compose.yml
ENV INITSYSTEM on

# Tomcat warns that we need to define default locale
RUN mkdir -p /etc/default \
    && echo "LANG=en_CA.UTF-8" > /etc/default/locale

# packages that we want to use at runtime, but you may not want
RUN apt-get update && apt-get install -y --no-install-recommends \
    maven \
    python \
    ruby \
    ssh \
    tomcat8 \
    tomcat8-admin

WORKDIR /usr/src/app
COPY . ./

# three step clone ensures that changes to the jetsonUtility repository are "manually"
# brought over and the change will invalidate the docker cache
RUN git clone https://github.com/EIODiagnostics/jetsonUtilities \
    && cd jetsonUtilities \
    && git checkout 42f3613199b5184461a9830daef96b6c09a7adfd

CMD ["/usr/src/app/testInstallation.bash"]
